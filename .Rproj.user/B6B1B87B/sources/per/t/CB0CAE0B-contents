
# PACOTES -----------------------------------------------------------------

pacman::p_load(pacman, tidyverse, lubridate, lmom, optimx, beepr, ggplot2, sf, moments, patchwork,
               doParallel, foreach, progressr)


# IMPORTAR DADOS ----------------------------------------------------------

# Importar dados caso não estejam no 'Global Environment'
path.df.precip.max.anual <- file.choose()
df.precip.max.anual <- readRDS(path.df.precip.max.anual)


# AJUSTE DAS ESTAÇÕES -----------------------------------------------------

# Definir nível de significância e limite do teste de Razão de Verossimilhança
l.ratio.alpha <- 0.05
l.ratio.lim <- qchisq(l.ratio.alpha, df = 1, lower.tail = FALSE)

# Número de estações
n.estacoes <- df.precip.max.anual$Estacao_codigo %>% unique %>% length

# Estações
estacoes <- df.precip.max.anual$Estacao_codigo %>% unique

# Configurações do processamento paralelo
parallel.cores <- parallel::detectCores() - 2 # deixar 2 cores livres
parallel.cl <- parallel::makeCluster(parallel.cores)
doParallel::registerDoParallel(parallel.cl)

# Função para processar uma estação
# Esta função está sem as avaliações dos testes de AIC, BIC e LRT
fun.ajuste.pmax <- function(df){
  
  tryCatch({
    
    # Informações básicas
    estacao <- unique(df$Estacao_codigo)  # código da estação
    pd.max <- df$Pdmax                    # série AM
    p0 <- sum(pd.max == 0)/length(pd.max) # probabilidade de determinada série ter pd.max = 0
    pd.max.pos <- pd.max[pd.max > 0]      # séries AM sem anos em que pd.max = 0
    n.serie <- length(pd.max)             # tamanho da série
    
    # Ajuste com L-MOM
    par.lmom.gev <- fun.lmom(xp = pd.max.pos, dist = "gev")   # GEV
    par.lmom.gu <- fun.lmom(xp = pd.max.pos, dist = "gumbel") # Gumbel
    
    # Ajuste com ML
    par.l.gev <- fun.max.l(param = unlist(par.lmom.gev), xp = pd.max.pos, dist = "gev")  # GEV
    par.l.gu <- fun.max.l(param = unlist(par.lmom.gu), xp = pd.max.pos, dist = "gumbel") # Gumbel
    
    # Ajuste com GML
    par.gl.gev.beta <- fun.max.gl(param = unlist(par.lmom.gev),
                                  xp = pd.max.pos,
                                  priori = "beta",
                                  media.kappa = -0.10,
                                  desvpad.kappa = 0.122)
    
    # Lista de resultados
    tibble(estacao = estacao,
           pd.max = list(tibble(Pdmax = pd.max)),
           p0 = p0,
           n.serie = n.serie,
           par.lmom.gev = par.lmom.gev,
           par.lmom.gu = par.lmom.gu,
           par.l.gev = par.l.gev,
           par.l.gu = par.l.gu,
           par.gl.gev.beta = par.gl.gev.beta)
  
  }, error = function(e){
    message(sprintf("Erro na estação %s: %s", estacao, e))
    NULL
  })
  
}

# Função p/ rodar a função fun.ajuste.pmax p/ cada estação em processamento paralelo usando foreach
fun.process <- function(df){
  
  estacoes <- split(df, df$Estacao_codigo)
  total <- length(estacoes)
  
  # Exportar funções críticas
  parallel::clusterExport(parallel.cl, 
                          c("fun.ajuste.pmax", "fun.lmom", "fun.max.l", "fun.max.gl"),
                          envir = environment())
  
  progressr::handlers(progressr::handler_progress(format = "Processando :current/:total :percent [:bar] :eta"))
  
  progressr::with_progress({
    
    p <- progressor(total)
    foreach(i = 1:total,
            .packages = c("lmom", "optimx", "dplyr", "purrr", "tidyr"),
            .export = c("fun.ajuste.pmax", "fun.lmom", "fun.max.l", "fun.max.gl"),
            .combine = bind_rows) %dopar% {
              
              res <- fun.ajuste.pmax(estacoes[[i]])
              p()
              res  # Já é um tibble
            }
    
  }) %>% 
    filter(!purrr::map_lgl(pd.max, is.null))  # Remove linhas com erro
}

teste <-
  df.precip.max.anual %>% 
  filter(Estacao_codigo %in% c(47002, 47003)) %>% 
  fun.ajuste.pmax()

glimpse(teste)

df.param <- fun.process(df = df.precip.max.anual)
