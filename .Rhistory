pd.max = list(tibble(Pdmax = pd.max)),
p0 = p0,
n.serie = n.serie,
par.lmom.gev = list(tibble(par.lmom.gev)),
par.lmom.gu = list(tibble(par.lmom.gu)),
par.l.gev = list(tibble(par.l.gev)),
par.l.gu = list(tibble(par.l.gu)),
par.gl.gev.beta = list(tibble(par.gl.gev.beta)),
hess.gl.beta = hess.gl,
.rows = 1) %>% unique
}, error = function(e){
message(sprintf("Erro na estação %s: %s", estacao, e))
NULL
})
}
# Testar resultados de uma estação
teste <-
df.precip.max.anual %>%
filter(Estacao_codigo %in% c(57000)) %>%
fun.ajuste.pmax()
# Configurações do processamento paralelo
parallel.cores <- parallel::detectCores() - 2 # deixar 2 cores livres
parallel.cl <- parallel::makeCluster(parallel.cores)
doParallel::registerDoParallel(parallel.cl)
# Função p/ rodar a função fun.ajuste.pmax p/ cada estação em processamento paralelo usando foreach
fun.process <- function(df){
# Iniciar "cronômetro"
tempo.inicio <- Sys.time()
estacoes <- df %>%
group_by(Estacao_codigo) %>%
group_split()
total <- length(estacoes)
# Exportar funções críticas
parallel::clusterExport(cl = parallel.cl,
varlist = c("fun.ajuste.pmax", "fun.lmom", "fun.max.l", "fun.max.gl"),
envir = .GlobalEnv)
progressr::handlers(progressr::handler_progress(format = "Processando :current/:total :percent [:bar] :eta"))
# Combina cada estação processada em paralelo usando row_bind em um data.frame usando tibble
resultados <- progressr::with_progress({
p <- progressor(total)
foreach(i = 1:total,
.packages = c("lmom", "optimx", "dplyr", "purrr", "tidyr"),
.export = c("fun.ajuste.pmax", "fun.ajuste.pmax", "fun.lmom", "fun.max.l", "fun.max.gl"),
.combine = function(...) {
res <- suppressWarnings(dplyr::bind_rows(...))
if(is.null(res) || nrow(res) == 0) {
return(tibble(estacao = numeric()))
}
res
}) %dopar% {
tryCatch({
res <- fun.ajuste.pmax(estacoes[[i]])
p()
res
}, error = function(e) {
message(sprintf("Erro grave na estação %s: %s",
estacoes[[i]]$Estacao_codigo[1], e$message))
NULL
})
}
})
# Filtragem segura
if("estacao" %in% names(resultados)) {
resultados <- resultados %>%
filter(!is.na(estacao),
map_lgl(pd.max, ~!is.null(.x) && nrow(.x) > 0))
} else {
resultados <- tibble()  # Fallback para dataframe vazio
}
# Mensagem final e alerta
duracao <- round(difftime(Sys.time(), tempo.inicio, units = "mins"), 1)
message(sprintf("\nProcessamento concluído!\nEstações processadas: %d/%d\nDuração: %s minutos",
nrow(resultados), total, duracao))
if(nrow(resultados) > 0) {
beepr::beep(sound = 10)
} else {
message("Nenhuma estação processada com sucesso")
}
return(resultados)
}
# Rodar processamento completo
df.param <-
df.precip.max.anual %>%
fun.process()
# Função p/ rodar a função fun.ajuste.pmax p/ cada estação em processamento paralelo usando foreach
fun.process <- function(df){
# Iniciar "cronômetro"
tempo.inicio <- Sys.time()
estacoes <- df %>%
group_by(Estacao_codigo) %>%
group_split()
total <- length(estacoes)
# Configurar processamento paralelo
parallel.cores <- parallel::detectCores() - 2 # deixar 2 cores livres
parallel.cl <- parallel::makeCluster(parallel.cores)
doParallel::registerDoParallel(parallel.cl)
# Exportar funções críticas
parallel::clusterExport(cl = parallel.cl,
varlist = c("fun.ajuste.pmax", "fun.lmom", "fun.max.l", "fun.max.gl"),
envir = .GlobalEnv)
progressr::handlers(progressr::handler_progress(format = "Processando :current/:total :percent [:bar] :eta"))
# Combina cada estação processada em paralelo usando row_bind em um data.frame usando tibble
resultados <- progressr::with_progress({
p <- progressor(total)
foreach(i = 1:total,
.packages = c("lmom", "optimx", "dplyr", "purrr", "tidyr"),
.export = c("fun.ajuste.pmax", "fun.ajuste.pmax", "fun.lmom", "fun.max.l", "fun.max.gl"),
.combine = function(...) {
res <- suppressWarnings(dplyr::bind_rows(...))
if(is.null(res) || nrow(res) == 0) {
return(tibble(estacao = numeric()))
}
res
}) %dopar% {
tryCatch({
res <- fun.ajuste.pmax(estacoes[[i]])
p()
res
}, error = function(e) {
message(sprintf("Erro grave na estação %s: %s",
estacoes[[i]]$Estacao_codigo[1], e$message))
NULL
})
}
})
# # Filtragem segura
# if("estacao" %in% names(resultados)) {
#   resultados <- resultados %>%
#     filter(!is.na(estacao),
#            map_lgl(pd.max, ~!is.null(.x) && nrow(.x) > 0))
# } else {
#   resultados <- tibble()  # Fallback para dataframe vazio
# }
# Mensagem final e alerta
duracao <- round(difftime(Sys.time(), tempo.inicio, units = "mins"), 1)
message(sprintf("\nProcessamento concluído!\nEstações processadas: %d/%d\nDuração: %s minutos",
nrow(resultados), total, duracao))
if(nrow(resultados) > 0) {
beepr::beep(sound = 10)
} else {
message("Nenhuma estação processada com sucesso")
}
stopCluster(parallel.cl)
return(resultados)
}
# Função de processamento com for loop convencional
fun.process <- function(df){
# Iniciar "cronômetro"
tempo.inicio <- Sys.time()
# Lista de estações
estacoes <- unique(df.precip.max.anual$Estacao_codigo)
n.estacoes <- length(estacoes)
# Redefinir df.param
df.param <- tibble()
# Processar primeira estação
suppressWarnings({
df.param <-
df.precip.max.anual %>%
filter(Estacao_codigo == estacoes[1]) %>%
fun.ajuste.pmax()
})
# Processar estações restantes
for(i in 2:n.estacoes){
estacao <- estacoes[i]
# Processar estações
suppressWarnings({
df.proxy <-
df.precip.max.anual %>%
filter(Estacao_codigo == estacao) %>%
fun.ajuste.pmax()
})
# Juntar resultados
df.param <- bind_rows(df.param, df.proxy)
cat("\nEstação", estacao, "processada.")
}
# Mensagem final e duração
duracao <- round(difftime(Sys.time(), tempo.inicio, units = "mins"), 1)
message(sprintf("\nProcessamento concluído!\nEstações processadas: %d/%d\nDuração: %s min",
nrow(df.param), n.estacoes, duracao))
beep(sound = 10)
return(df.param)
}
# Rodar processamento completo
df.param <-
df.precip.max.anual %>%
fun.process()
# Função p/ rodar a função fun.ajuste.pmax p/ cada estação em processamento paralelo usando foreach
fun.process <- function(df){
# Iniciar "cronômetro"
tempo.inicio <- Sys.time()
estacoes <- df %>%
group_by(Estacao_codigo) %>%
group_split()
total <- length(estacoes)
# Configurar processamento paralelo
parallel.cores <- parallel::detectCores() - 2 # deixar 2 cores livres
parallel.cl <- parallel::makeCluster(parallel.cores)
doParallel::registerDoParallel(parallel.cl)
# Exportar funções críticas
parallel::clusterExport(cl = parallel.cl,
varlist = c("fun.ajuste.pmax", "fun.lmom", "fun.max.l", "fun.max.gl"),
envir = .GlobalEnv)
progressr::handlers(progressr::handler_progress(format = "Processando :current/:total :percent [:bar] :eta"))
# Combina cada estação processada em paralelo usando row_bind em um data.frame usando tibble
resultados <- progressr::with_progress({
p <- progressor(total)
foreach(i = 1:total,
.packages = c("lmom", "optimx", "dplyr", "purrr", "tidyr"),
.export = c("fun.ajuste.pmax", "fun.ajuste.pmax", "fun.lmom", "fun.max.l", "fun.max.gl"),
.combine = function(...) {
res <- suppressWarnings(dplyr::bind_rows(...))
if(is.null(res) || nrow(res) == 0) {
return(tibble(estacao = numeric()))
}
res
}) %dopar% {
tryCatch({
res <- fun.ajuste.pmax(estacoes[[i]])
p()
res
}, error = function(e) {
message(sprintf("Erro grave na estação %s: %s",
estacoes[[i]]$Estacao_codigo[1], e$message))
NULL
})
}
})
# # Filtragem segura
# if("estacao" %in% names(resultados)) {
#   resultados <- resultados %>%
#     filter(!is.na(estacao),
#            map_lgl(pd.max, ~!is.null(.x) && nrow(.x) > 0))
# } else {
#   resultados <- tibble()  # Fallback para dataframe vazio
# }
# Mensagem final e alerta
duracao <- round(difftime(Sys.time(), tempo.inicio, units = "mins"), 1)
message(sprintf("\nProcessamento concluído!\nEstações processadas: %d/%d\nDuração: %s minutos",
nrow(resultados), total, duracao))
if(nrow(resultados) > 0) {
beepr::beep(sound = 10)
} else {
message("Nenhuma estação processada com sucesso")
}
stopCluster(parallel.cl)
return(resultados)
}
# Rodar processamento completo
df.param <-
df.precip.max.anual %>%
fun.process()
View(df.param)
# Máxima verossimilhança generalizada
fun.max.gl <- function(param = c(NULL, NULL, NULL),
xp,
priori = "beta",
media.kappa,
desvpad.kappa){
# Pacotes
p_load(pacman, optimx, dplyr)
# Verificar se |kappa| > 0.5, caso sim, substituir pela média da distribuição a priori de Martins e Stedinger
if(abs(param[3]) > 0.5) param[3] <- media.kappa
if(priori == "beta"){
# Otimizador p/ Beta
max.optimx <-
optimx::optimx(param,
fun.gl.beta.gev,
method = c("Nelder-Mead", "BFGS", "L-BFGS-B"),
xp = xp,
media.kappa = media.kappa,
desvpad.kappa = desvpad.kappa)
# Organizar o data.frame de saída
max.gl <- data.frame(
csi = max.optimx$csi[which(max.optimx$value == min(max.optimx$value))],
alpha = max.optimx$alpha[which(max.optimx$value == min(max.optimx$value))],
kappa = max.optimx$kappa[which(max.optimx$value == min(max.optimx$value))],
value = min(max.optimx$value),
hess = nest(tibble(
attributes(max.optimx)$details[which(max.optimx[, 4] == min(max.optimx[, 4])), "nhatend"][[1]]))) %>%
rename("hess" = "data")
} else{
# Descartar
if(priori == "normal"){
# Otimizador p/ Normal
max.gl <- optimx::optimx(param,
fun.gl.normal.gev,
method = c("Nelder-Mead", "BFGS", "L-BFGS-B"),
xp = xp,
media.kappa = media.kappa,
desvpad.kappa = desvpad.kappa) %>%
slice_min(value) %>%             # pega somente a linha com a menor (maior) verossimilhança
select(csi, alpha, kappa, value) # pega só os parâmetros e o valor do máximo
} else {errorCondition(message = "beta ou normal")}
}
max.gl$value <- -max.gl$value # corrige sinal do máximo
return(max.gl)
} # retorna um dataframe com 5 colunas: csi, alpha, kappa, value e hess
# Função de processamento com for loop convencional
fun.process <- function(df){
# Iniciar "cronômetro"
tempo.inicio <- Sys.time()
# Lista de estações
estacoes <- unique(df.precip.max.anual$Estacao_codigo)
n.estacoes <- length(estacoes)
# Redefinir df.param
df.param <- tibble()
# Processar primeira estação
suppressWarnings({
df.param <-
df.precip.max.anual %>%
filter(Estacao_codigo == estacoes[1]) %>%
fun.ajuste.pmax()
})
# Processar estações restantes
for(i in 2:n.estacoes){
estacao <- estacoes[i]
# Processar estações
suppressWarnings({
df.proxy <-
df.precip.max.anual %>%
filter(Estacao_codigo == estacao) %>%
fun.ajuste.pmax()
})
# Juntar resultados
df.param <- bind_rows(df.param, df.proxy)
cat("\nEstação", estacao, "processada.")
}
# Mensagem final e duração
duracao <- round(difftime(Sys.time(), tempo.inicio, units = "mins"), 1)
message(sprintf("\nProcessamento concluído!\nEstações processadas: %d/%d\nDuração: %s min",
nrow(df.param), n.estacoes, duracao))
beep(sound = 10)
return(df.param)
}
# Função para processar uma estação
# Esta função está sem as avaliações dos testes de AIC, BIC e LRT
fun.ajuste.pmax <- function(df){
tryCatch({
# Informações básicas
estacao <- unique(df$Estacao_codigo)  # código da estação
pd.max <- df$Pdmax                    # série AM
p0 <- sum(pd.max == 0)/length(pd.max) # probabilidade de determinada série ter pd.max = 0
pd.max.pos <- pd.max[pd.max > 0]      # séries AM sem anos em que pd.max = 0
n.serie <- length(pd.max)             # tamanho da série
# Ajuste com L-MOM
par.lmom.gev <- fun.lmom(xp = pd.max.pos, dist = "gev")   # GEV
par.lmom.gu <- fun.lmom(xp = pd.max.pos, dist = "gumbel") # Gumbel
# Ajuste com ML
par.l.gev <- fun.max.l(param = unlist(par.lmom.gev), xp = pd.max.pos, dist = "gev")  # GEV
par.l.gu <- fun.max.l(param = unlist(par.lmom.gu), xp = pd.max.pos, dist = "gumbel") # Gumbel
# Ajuste com GML
par.gl.gev.beta <- fun.max.gl(param = unlist(par.lmom.gev),
xp = pd.max.pos,
priori = "beta",
media.kappa = -0.10,
desvpad.kappa = 0.122)
# Extrair máximos
max.l.gev <- par.l.gev$value
max.l.gu <- par.l.gu$value
max.gl.gev.beta <- par.gl.gev.beta$value
# Matriz hessiana
hess.gl <- par.gl.gev.beta$hess
# Lista de resultados
tibble(estacao = estacao,
pd.max = list(tibble(Pdmax = pd.max)),
p0 = p0,
n.serie = n.serie,
par.lmom.gev = list(tibble(par.lmom.gev)),
par.lmom.gu = list(tibble(par.lmom.gu)),
par.l.gev = list(tibble(par.l.gev)),
par.l.gu = list(tibble(par.l.gu)),
par.gl.gev.beta = list(tibble(par.gl.gev.beta)),
max.gl.gev = max.gl.gev.beta,
hess.gl.beta = hess.gl,
.rows = 1) %>% unique
}, error = function(e){
message(sprintf("Erro na estação %s: %s", estacao, e))
NULL
})
}
# Testar resultados de uma estação
teste <-
df.precip.max.anual %>%
filter(Estacao_codigo %in% c(57000)) %>%
fun.ajuste.pmax()
View(teste[[9]][[1]])
# Função para processar uma estação
# Esta função está sem as avaliações dos testes de AIC, BIC e LRT
fun.ajuste.pmax <- function(df){
tryCatch({
# Informações básicas
estacao <- unique(df$Estacao_codigo)  # código da estação
pd.max <- df$Pdmax                    # série AM
p0 <- sum(pd.max == 0)/length(pd.max) # probabilidade de determinada série ter pd.max = 0
pd.max.pos <- pd.max[pd.max > 0]      # séries AM sem anos em que pd.max = 0
n.serie <- length(pd.max)             # tamanho da série
# Ajuste com L-MOM
par.lmom.gev <- fun.lmom(xp = pd.max.pos, dist = "gev")   # GEV
par.lmom.gu <- fun.lmom(xp = pd.max.pos, dist = "gumbel") # Gumbel
# Ajuste com ML
par.l.gev <- fun.max.l(param = unlist(par.lmom.gev), xp = pd.max.pos, dist = "gev")  # GEV
par.l.gu <- fun.max.l(param = unlist(par.lmom.gu), xp = pd.max.pos, dist = "gumbel") # Gumbel
# Ajuste com GML
par.gl.gev.beta <- fun.max.gl(param = unlist(par.lmom.gev),
xp = pd.max.pos,
priori = "beta",
media.kappa = -0.10,
desvpad.kappa = 0.122)
# Extrair máximos
max.l.gev <- par.l.gev$value
max.l.gu <- par.l.gu$value
max.gl.gev.beta <- par.gl.gev.beta$value
# Matriz hessiana
hess.gl <- par.gl.gev.beta$hess
# Lista de resultados
tibble(estacao = estacao,
pd.max = list(tibble(Pdmax = pd.max)),
p0 = p0,
n.serie = n.serie,
par.lmom.gev = list(tibble(par.lmom.gev)),
par.lmom.gu = list(tibble(par.lmom.gu)),
par.l.gev = list(tibble(par.l.gev)),
par.l.gu = list(tibble(par.l.gu)),
par.gl.gev.beta = list(tibble(par.gl.gev.beta)),
max.l.gu = max.l.gu,
max.l.gev = max.l.gev,
max.gl.gev = max.gl.gev.beta,
hess.gl.beta = hess.gl,
.rows = 1) %>% unique
}, error = function(e){
message(sprintf("Erro na estação %s: %s", estacao, e))
NULL
})
}
# Testar resultados de uma estação
teste <-
df.precip.max.anual %>%
filter(Estacao_codigo %in% c(57000)) %>%
fun.ajuste.pmax()
View(teste)
View(teste[[5]][[1]])
View(teste[[7]][[1]])
# Função para processar uma estação
# Esta função está sem as avaliações dos testes de AIC, BIC e LRT
fun.ajuste.pmax <- function(df){
tryCatch({
# Informações básicas
estacao <- unique(df$Estacao_codigo)  # código da estação
pd.max <- df$Pdmax                    # série AM
p0 <- sum(pd.max == 0)/length(pd.max) # probabilidade de determinada série ter pd.max = 0
pd.max.pos <- pd.max[pd.max > 0]      # séries AM sem anos em que pd.max = 0
n.serie <- length(pd.max)             # tamanho da série
# Ajuste com L-MOM
par.lmom.gev <- fun.lmom(xp = pd.max.pos, dist = "gev")   # GEV
par.lmom.gu <- fun.lmom(xp = pd.max.pos, dist = "gumbel") # Gumbel
# Ajuste com ML
par.l.gev <- fun.max.l(param = unlist(par.lmom.gev), xp = pd.max.pos, dist = "gev")  # GEV
par.l.gu <- fun.max.l(param = unlist(par.lmom.gu), xp = pd.max.pos, dist = "gumbel") # Gumbel
# Ajuste com GML
par.gl.gev.beta <- fun.max.gl(param = unlist(par.lmom.gev),
xp = pd.max.pos,
priori = "beta",
media.kappa = -0.10,
desvpad.kappa = 0.122)
# Extrair máximos
max.l.gev <- par.l.gev$value
max.l.gu <- par.l.gu$value
max.gl.gev.beta <- par.gl.gev.beta$value
# Matriz hessiana
hess.gl <- par.gl.gev.beta$hess
# Lista de resultados
tibble(estacao = estacao,
pd.max = list(tibble(Pdmax = pd.max)),
p0 = p0,
n.serie = n.serie,
par.lmom.gev = list(tibble(par.lmom.gev)),
par.lmom.gu = list(tibble(par.lmom.gu)),
par.l.gev = list(tibble(par.l.gev[,-4])),
par.l.gu = list(tibble(par.l.gu[,-4])),
par.gl.gev.beta = list(tibble(par.gl.gev.beta[,-c(4,5)])),
max.l.gu = max.l.gu,
max.l.gev = max.l.gev,
max.gl.gev = max.gl.gev.beta,
hess.gl.beta = hess.gl,
.rows = 1) %>% unique
}, error = function(e){
message(sprintf("Erro na estação %s: %s", estacao, e))
NULL
})
}
# Testar resultados de uma estação
teste <-
df.precip.max.anual %>%
filter(Estacao_codigo %in% c(57000)) %>%
fun.ajuste.pmax()
View(teste[[9]][[1]])
# Rodar processamento completo
df.param <-
df.precip.max.anual %>%
fun.process()
View(df.precip.max.anual)
View(df.param)
pacman::p_load(pacman, tidyverse, lubridate, lmom, optimx, beepr, ggplot2, sf, moments, patchwork,
doParallel, foreach, progressr, pbapply)
df.param %>%
filter(max.gl.gev == 1e6) %>%
nrow
df.param[,c(10,11,12) == 1e6] %>% nrow
# Qtde estações que retornaram 1e6
df.param %>%
filter(max.gl.gev == -1e6) %>%
nrow
